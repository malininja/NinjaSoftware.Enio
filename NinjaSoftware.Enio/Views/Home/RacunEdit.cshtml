@model NinjaSoftware.Enio.Models.RacunViewModel
@using NinjaSoftware.Api.Mvc
@using NinjaSoftware.Enio.CoolJ.HelperClasses
@using Newtonsoft.Json

@Scripts.Render("/bundles/CoolJEntities")
@Scripts.Render("/bundles/globalize")

<script type="text/javascript" src="@Url.Content("~/Scripts/knockout-2.1.0.js")"></script>

<style type="text/css">
select {
   width: 310px;
   height: 34px;
   overflow: hidden;
   background: #ddd;
   border: 1px solid #ccc;
   font-size: 1.2em;
   padding: 5px;
}
</style>

@{
    string title;
    
    if (Model.RacunGlava.IsNew)
    {
        title = "Unos novog računa";
    }
    else
    {
        title = string.Format("Račun br. {0}", Model.RacunGlava.BrojRacuna);
    }

    ViewBag.Title = title;

    NsController nsController = (NsController)ViewContext.Controller;
}

<h2 style="color: red">@title</h2>

<form id="FormRacun" action="/someServerSideHandler">

    <div data-bind="template: { name: 'racunGlavaTemplate', data: racunGlava }"></div>

    <script type="text/html" id="racunGlavaTemplate">
        <table>
            <tr>
                <td>Partner:</td>
                <td>
                    <select class="styled-select" id="partnerList" data-bind="options: $root.partnerCollection, value: PartnerId, optionsText: 'Naziv', optionsValue: 'PartnerId'">
                    </select>
                </td>

                <td>Tarifa:</td>
                <td>
                    <select data-bind="options: $root.tarifaCollection, value: TarifaId, optionsText: 'Naziv', optionsValue: 'TarifaId'">
                    </select>
                </td>
            </tr>

            <tr>
                <td>Datum:</td>
                <td>
                    <input id="InputDatum" class="required date" data-bind="value: Datum" />
                </td>

                <td>Vrijeme:</td>
                <td>
                    <input class="required" data-bind="value: Vrijeme" />
                </td>
            </tr>

            <tr>
                <td>Mjesto rada:</td>
                <td>
                    <input data-bind="value: MjestoRadaNaziv" />
                </td>

                <td>Adresa rada:</td>
                <td>
                    <input data-bind="value: MjestoRadaAdresa" />
                </td>
            </tr>

            <tr>
                <td>Valuta:</td>
                <td>
                    <input id="inputValuta" class="required number numberCss" data-bind="value: Valuta" />
                    dana
                </td>

                <td>Status:</td>
                <td>
                    <select data-bind="options: $root.statusCollection, value: StatusId, optionsText: 'Name', optionsValue: 'StatusId'">
                    </select>
                </td>
            </tr>

            <tr>
                <td>
                    <input type="submit" value="Pohrani" />
                </td>

                <td>
                    Ispis (TODO)
                </td>
                <td></td>
                <td></td>
            </tr>
        </table>
    </script>

    <br /><br />
    <h3 style="color: blue">Unos nove stavke</h3>
    <table>
        <tr>
            <th width="300px">Artikl</th>
            <th width="150px">Količina</th>
            <th width="40px">Jm</th>
            <th width="150px">Cijena</th>
            <td></td>
        </tr>
        <tr>
            <td>
                <select id="dropDownArtikl" data-bind="options: $root.artiklCollection, value: $root.selectedArtikl, optionsText: 'Naziv'")></select>
            </td>
            <td>
                <input class="requrired number numberCss" data-bind="value: selectedArtiklKolicina" />
            </td>
            <td>
                <span data-bind="text: selectedArtikl().Jm"></span>
            </td>
            <td>
                <input class="required number numberCss" data-bind="value: selectedArtiklCijena" />
                kn
            </td>
            <td><input type="button" value="Unesi stavku" onclick="viewModel.addRacunStavka();" /></td>
        </tr>
    </table>

    <br />
    <h3 style="color: blue">Unesene stavke</h3>
    <table id="tableStavke">
      <thead>
        <tr>
            <th width="330px">Artikl</th>
            <th width="150px">Količina</th>
            <th width="40px">Jm</th>
            <th width="150px">Cijena</th>
            <th></th>
        </tr>
      </thead>
      <tbody data-bind="foreach: racunStavkaCollection">
        <tr>
            <td data-bind="text: Artikl.Naziv"></td>
            <td>
                <input class="required number numberCss" data-bind="value: Kolicina, uniqueName: true" />
            </td>
            <td>
                <span data-bind="text: Artikl.Jm"></span>
            </td>
            <td>
                <input class="required number numberCss" data-bind="value: Cijena, uniqueName: true" />
                kn
            </td>
            <td>
                <a href="#" data-bind="click: function(data) { $root.deleteRacunStavka(data); }"><span>Obriši</span></a>
            </td>
        </tr>
      </tbody>
        
    </table>
</form>
<script type="text/javascript">
    Globalize.culture("hr");

    $(document).ready(function () {
        $("#dropDownArtikl").change(function () {
            var cijena = Globalize.format(viewModel.selectedArtikl().Cijena, "n2");
            viewModel.selectedArtiklCijena(cijena);
        });

        $("#partnerList").change(function () {
            //viewModel.racunGlava().Valuta = a
            partnerId = $(this).val();

            $(viewModel.partnerCollection()).each(function () {
                if (this.PartnerId.toString() === partnerId.toString()) {
                    $("#inputValuta").val(this.Valuta);
                }
            });
        });

        $("#InputDatum").datepicker();
    });

    var racunViewModel = function () {
        var self = {};

        self.racunGlava = ko.observable(@Html.Raw(JsonConvert.SerializeObject(Model.RacunGlava)));
        self.racunStavkaCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.RacunStavkaCollection)));
        self.artiklCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.ArtiklCollection)));
        self.partnerCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.PartnerCollection)));
        self.tarifaCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.TarifaCollection)));
        self.statusCollection = ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model.StatusCollection)));

        // hr formatting
        var date = new Date(self.racunGlava().Datum);
        self.racunGlava().Datum = Globalize.format(date, "d");

        $(self.racunStavkaCollection()).each(function () {
            var kolicina = parseFloat(this.Kolicina.toString());
            this.Kolicina = Globalize.format(kolicina, "n2");

            var cijena = parseFloat(this.Cijena.toString());
            this.Cijena = Globalize.format(cijena, "n2");
        });

        var cijena;
        if (self.artiklCollection().length > 0) {
            cijena = self.artiklCollection()[0].Cijena;
        }
        else {
            cijena = 0;
        }

        self.selectedArtikl = ko.observable();
        self.selectedArtiklKolicina = ko.observable(1);
        self.selectedArtiklCijena = ko.observable(Globalize.format(cijena, "n2"));

        self.save = function (form) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("RacunEditBla")",
                data: {
                    racunGlavaId: self.racunGlava().RacunGlavaId,
                    racunGlavaJson: ko.toJSON(self.racunGlava),
                    racunStavkaCollectionJson: ko.toJSON(self.racunStavkaCollection)
                },
                success: function (result) {
                    alert(result);
                    window.location.href = window.location.href;
                },
                error: function () {
                    alert("no go");
                },
                async: false,
                cache: false
            });
        }; 

        self.addRacunStavka = function () {
            var kolicina = Globalize.parseFloat(self.selectedArtiklKolicina().toString());
            if (isNaN(kolicina)) {
                alert("Unesena količina nije ispravna.");
                return;
            }

            var cijena = Globalize.parseFloat(self.selectedArtiklCijena());
            if (isNaN(cijena)) {
                alert("Unesena cijena nije ispravna.");
                return;
            }

            var racunStavka;
            var racunStavkaIndex;

            $(self.racunStavkaCollection()).each(function (index) {
                if (this.ArtiklId === self.selectedArtikl().ArtiklId) {
                    racunStavka = this;
                    racunStavkaIndex = index;
                }
            });

            if (undefined === racunStavka) {
                racunStavka = Enio.CoolJ.RacunStavka({ 
                    ArtiklId: self.selectedArtikl().ArtiklId,
                    Artikl: self.selectedArtikl(), 
                    Kolicina: Globalize.format(kolicina, "n2"), 
                    Cijena: cijena,
                    PdvPosto: self.selectedArtikl().Pdv.Stopa
                });

                self.racunStavkaCollection.push(racunStavka);
            }
            else {
                var kolicina = Globalize.parseFloat(racunStavka.Kolicina.toString()) + Globalize.parseFloat(kolicina.toString());
                racunStavka.Kolicina = Globalize.format(kolicina, "n2");
                self.racunStavkaCollection.remove(racunStavka);
                self.racunStavkaCollection.splice(racunStavkaIndex, 0, racunStavka);
            }
        };

        self.deleteRacunStavka = function (racunStavka) {
            self.racunStavkaCollection.remove(racunStavka);
        }

        return self;
    };

    var viewModel = racunViewModel();
    ko.applyBindings(viewModel);
    $("#FormRacun").validate({ submitHandler: viewModel.save });
</script>